{
	"CLIENT/GetPlayerData": {
		"prefix": "GetPlayerData",
		"body": ["local ${1:variable} = QBCore.Functions.GetPlayerData()"],
		"description": "CLIENT/GetPlayerData"
	},
	"CLIENT/Get the coords of an entity": {
		"prefix": "GetCoords",
		"body": ["-- Return the vector 4 and with x,y,z and w", "local ${1:variable} = QBCore.Functions.GetCoords(${2:entity})"],
		"description": "CLIENT/Get the coordinates from an entity, returns a vector3"
	},
	"CLIENT/Floating text on the screen": {
		"prefix": "DrawText",
		"body": ["QBCore.Functions.DrawText(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:scale}, ${6:r}, ${7:g}, ${8:b}, ${9:alpha}, ${10:text})"],
		"description": "CLIENT/DrawText"
	},
	"CLIENT/ Draw text on a 3D space": {
		"prefix": "DrawText3D",
		"body": ["QBCore.Functions.DrawText3D(${1:x},${2:y},${3:z},${4:text})", "", ""],
		"description": "CLIENT/DrawText3D Draw text on a 3D space"
	},
	"CLIENT/Draw Nui Text first argument is the text, the second one is the position, the last argument is optional": {
		"prefix": ["DrawNuiText", "dw", "Draw", "Text", "Dtext"],
		"body": ["exports[\"qb-core\"]:DrawText(${1:text},${2:position}) "],
		"description": "CLIENT/Draw Nui Text first argument is the text, the second one is the position, the last argument is optional"
	},
	"CLIENT/ Change DrawNuiText First argument is a string with text, second is optional": {
		"prefix": ["ChangeNuiText", "ct", "ChangeText", "Ctext"],
		"body": ["exports[\"qb-core\"]:ChangeText(${1:text},${2:position}) "],
		"description": "CLIENT/ Change DrawNuiText First argument is a string with text, second is optional"
	},
	"CLIENT/ Hide TextHide NUI text": {
		"prefix": ["HideText", "ht", "Hide", "Htext"],
		"body": ["exports[\"qb-core\"]:HideText() "],
		"description": "CLIENT/ Hide TextHide NUI text"
	},
	"CLIENT/ KeyPressed Emulate a key press effect and hide the NUI Text": {
		"prefix": ["KeyPressed", "kp", "Ktext"],
		"body": ["exports[\"qb-core\"]:KeyPressed() "],
		"description": "CLIENT/ KeyPressed Emulate a key press effect and hide the NUI Text"
	},
	"CLIENT/USE PlayAnim it already load the animation before playing": {
		"prefix": "DrawText3D",
		"body": ["QBCore.Functions.RequestAnimDict(${1:animationDict})", "", ""],
		"description": "CLIENT/Request Animation Dictionary, USE PlayAnim it already load the animation before playing"
	},
	"CLIENT/Play Animation": {
		"prefix": ["PlayAnim", "PA"],
		"body": ["QBCore.Functions.PlayAnim(${1:animDict}, ${2:animName}, ${3:upperBodyOnly}, ${4:duration})", "", ""],
		"description": "CLIENT/Play Animation"
	},
	"CLIENT/Load a Model into memory": {
		"prefix": "LoadModel",
		"body": ["QBCore.Functions.LoadModel(${1:model})"],
		"description": "CLIENT/Load a Model into memory"
	},
	"CLIENT/Send a Nofitication from the client": {
		"prefix": "Notify",
		"body": ["--Types: success,primary,error,police,ambulance", "QBCore.Functions.Notify(${1:Text}, ${2:textType}, ${3:length})"],
		"description": "CLIENT/Send a Nofitication from the client"
	},
	"CLIENT/This print on the server console the table or value you pass (you need to open svgui)": {
		"prefix": ["Debug"],
		"body": ["QBCore.Debug(${1:jsonobject})"],
		"description": "CLIENT/Debug Print in server console a table or value"
	},
	"CLIENT/Trigger a server event with a return of a value": {
		"prefix": ["TriggerCallback", "TC"],
		"body": ["QBCore.Functions.TriggerCallback(${1:name},function(${2:returnValue})", "", "end,${3:Datasend})"],
		"description": "CLIENT/Trigger a server event with a return of a value"
	},
	"CLIENT/ Box Zone, Create a PolyZone Box": {
		"prefix": ["Boxzone", "Box", "PolyBox"],
		"body": ["local ${1:Name}= BoxZone:Create(${2:Vector3}, ${3:W}, ${4:H}, {", "    name=${5:name},", "    --debugPoly=false,", "})", "${1:Name}:onPlayerInOut(function(isPointInside, point)", "end)"],
		"description": "CLIENT/ Box Zone, Create a PolyZone Box"
	},
	"CLIENT/ Get all vehicles from client": {
		"prefix": "GetVehicles",
		"body": ["QBCore.Functions.GetVehicles()"],
		"description": "CLIENT/GetVehicles Get all vehicles from client"
	},
	"CLIENT/GetObjects": {
		"prefix": "GetObjects",
		"body": ["QBCore.Functions.GetObjects()"],
		"description": "CLIENT/GetObjects"
	},
	"CLIENT/Return the closest player and distance": {
		"prefix": "GetClosestPlayer",
		"body": ["--This return the closes PLAYER and the distance", "-- Optional Coords", "", "local ${1:player}, ${2:distance} = QBCore.Functions.GetClosestPlayer(${3:coords})"],
		"description": "CLIENT/GetClosestPlayer"
	},
	"CLIENT/ This return a table with the player source.": {
		"prefix": "GetPlayersFromCoords",
		"body": ["local ${1:ClosestPlayers}= QBCore.Functions.GetPlayersFromCoords(${2:coords},${3:distance})"],
		"description": "CLIENT/GetPlayersFromCoords This return a table with the player source."
	},
	"CLIENT/ return closest vehicle and the distance, argument coords is optional": {
		"prefix": "GetClosestVehicle",
		"body": ["local closeVeh,closeDist = QBCore.Functions.GetClosestVehicle(${1:coords})"],
		"description": "CLIENT/GetClosestVehicle return closest vehicle and the distance, argument coords is optional"
	},
	"CLIENT/ return closest Object and the distance, argument coords is optional": {
		"prefix": "GetClosestObject",
		"body": ["local closeObj,closeDist = QBCore.Functions.GetClosestObject(${1:coords})"],
		"description": "CLIENT/GetClosestObject return closest Object and the distance, argument coords is optional"
	},
	"CLIENT/pass an entity and a list of bones and return the most closest to the player": {
		"prefix": "GetClosestBone",
		"body": ["local bone,coords,distance = QBCore.Functions.GetClosestBone(${1:entity},${2:list})"],
		"description": "CLIENT/GetClosestBone pass an entity and a list of bones and return the most closest to the player"
	},
	"CLIENT/ Spawn a vehicle from Server side": {
		"prefix": "SpawnVehicle",
		"body": ["QBCore.Functions.TriggerCallback('QBCore:Server:SpawnVehicle', function(netId)", "     local veh = NetToVeh(netId)", "     TriggerEvent('vehiclekeys:client:SetOwner', QBCore.Functions.GetPlate(veh))", "end, ${1:VehicleModel}, ${2:Coordinates}, ${3:Warp})"],
		"description": "CLIENT/ Spawn a vehicle from Server side"
	},
	"CLIENT/Delete a vehicle": {
		"prefix": "DeleteVehicle",
		"body": ["QBCore.Functions.DeleteVehicle(${1:vehicle})"],
		"description": "CLIENT/DeleteVehicle Delete a vehicle"
	},
	"CLIENT/return the plate of the passed vehicle": {
		"prefix": "GetPlate",
		"body": ["local plate = QBCore.Functions.GetPlate(${1:vehicle})"],
		"description": "CLIENT/GetPlate return the plate of the passed vehicle"
	},
	"CLIENT/return true or false if the coords are cleasr of others vehicles": {
		"prefix": "SpawnClear",
		"body": ["local isClear = QBCore.Functions.SpawnClear(${1:coords},${2:radius})"],
		"description": "CLIENT/SpawnClear return true or false if the coords are cleasr of others vehicles"
	},
	"CLIENT/return all the properties of the passed vehicle or return null": {
		"prefix": "GetVehicleProperties",
		"body": ["local props = QBCore.Functions.GetVehicleProperties(${1:vehicle})"],
		"description": "CLIENT/GetVehicleProperties return all the properties of the passed vehicle or return null"
	},
	"CLIENT/Set all the properties of a vehicle passed": {
		"prefix": "SetVehicleProperties",
		"body": ["QBCore.Functions.SetVehicleProperties(${1:vehicle},${2:props})", "--Here you can use QBCore.Functions.SetVehicleProperties(vehicle,QBCore.Functions.GetVehicleProperties(vehicle))"],
		"description": "CLIENT/SetVehicleProperties Set all the properties of a vehicle passed"
	},
	"CLIENT/SERVER Get the QBCore object and all the functions": {
		"prefix": "GetCore",
		"body": ["local QBCore = exports[\"qb-core\"]:GetCoreObject()"],
		"description": "CLIENT/SERVER Get the QBCore object and all the functions"
	},
	"SERVER/Get the coords of the entity passed, return a vector4(x,y,z,w) w is heading": {
		"prefix": "GetCore",
		"body": ["local Coords = QBCore.Functions.GetCoords(${1:entity})"],
		"description": "SERVER/Get the coords of the entity passed, return a vector4(x,y,z,w) w is heading"
	},
	"SERVER/Return the passed identifier or nil if nothing is found": {
		"prefix": "GetIdentifier",
		"body": ["local idType = QBCore.Functions.GetIdentifier(${1:source},${2:idtype})", ""],
		"description": "SERVER/Return the passed identifier or nil if nothing is found"
	},
	"SERVER/Return the source of the passed identifier": {
		"prefix": "GetSource",
		"body": ["local source = QBCore.Functions.GetSource(${1:identifier})", ""],
		"description": "SERVER/Return the source of the passed identifier"
	},
	"SERVER/Return all the data from the respective source": {
		"prefix": "GetPlayer",
		"body": ["local Player = QBCore.Functions.GetPlayer(${1:source})", ""],
		"description": "SERVER/Return all the data from the respective source"
	},
	"SERVER/Return all the data from the respective citizenid": {
		"prefix": "GetPlayerByCitizenId",
		"body": ["local Player = QBCore.Functions.GetPlayerByCitizenId(${1:citizenid})", ""],
		"description": "SERVER/Return all the data from the respective citizenid"
	},
	"SERVER/Return all the data from the respective phone": {
		"prefix": "GetPlayerByPhone",
		"body": ["local Player = QBCore.Functions.GetPlayerByPhone(${1:phoneNumber})", ""],
		"description": "SERVER/Return all the data from the respective phone"
	},
	"SERVER/Return all players": {
		"prefix": "GetPlayers",
		"body": ["local Players = QBCore.Functions.GetPlayers()", ""],
		"description": "SERVER/Return all players"
	},
	"SERVER/Return all the DATA from all players": {
		"prefix": "GetQBPlayers",
		"body": ["local Players = QBCore.Functions.GetQBPlayers()", ""],
		"description": "SERVER/Return all the DATA from all players this is not the same as GetPlayers, that only return the source"
	},
	"SERVER/Return an array players and the amount of players on duty for the selected job": {
		"prefix": "GetPlayersOnDuty",
		"body": ["local players,count= QBCore.Functions.GetPlayersOnDuty(${1:job})", ""],
		"description": "SERVER/Return an array players and the amount of players on duty for the selected job"
	},
	"SERVER/Returns only the amount of players on duty for the specified job": {
		"prefix": "GetDutyCount",
		"body": ["local count= QBCore.Functions.GetDutyCount(${1:job})", ""],
		"description": "SERVER/Returns only the amount of players on duty for the specified job"
	},
	"SERVER/Returns the objects related to buckets, first returned value is the player buckets, second one is entity buckets": {
		"prefix": "GetBucketObjects",
		"body": ["local count= QBCore.Functions.GetBucketObjects()", ""],
		"description": "SERVER/Returns the objects related to buckets, first returned value is the player buckets, second one is entity buckets"
	},
	"SERVER/Will set the provided player id / source into the provided bucket id, return true if success or false": {
		"prefix": "GetBucketObjects",
		"body": ["local count= QBCore.Functions.SetPlayerBucket(${1:source},${2:buket})", ""],
		"description": "SERVER/Will set the provided player id / source into the provided bucket id, return true if success or false"
	},
	"SERVER/Will set any entity into the provided bucket, for example peds / vehicles / props / etc.": {
		"prefix": "SetEntityBucket",
		"body": ["local count= QBCore.Functions.SetEntityBucket(${1:entity},${2:buket})", ""],
		"description": "SERVER/Will set any entity into the provided bucket, for example peds / vehicles / props / etc."
	},
	"SERVER/Will return an array of all the player ids inside the current bucket or false": {
		"prefix": "GetPlayersInBucket",
		"body": ["local Current = QBCore.Functions.GetPlayersInBucket(${1:bucket})", ""],
		"description": "SERVER/Will return an array of all the player ids inside the current bucket or false"
	},
	"SERVER/Create a callback and return a value": {
		"prefix": "CreateCallback",
		"body": ["QBCore.Functions.CreateCallback(${1:name},function(source,cb,${2:args}) ", "", "end)", ""],
		"description": "SERVER/Create a callback and return a value"
	},
	"SERVER/Create a item": {
		"prefix": "CreateUseableItem",
		"body": ["QBCore.Functions.CreateUseableItem(${1:item},cb)", ""],
		"description": "SERVER/Create a item"
	},
	"SERVER/Kick a player from the server": {
		"prefix": "Kick",
		"body": ["QBCore.Functions.Kick(${1:source},${2:reason},${3:setKickReason},${4:deferrals})", ""],
		"description": "SERVER/Kick a player from the server"
	},
	"SERVER/Add Permission for a player, always create the permission on the server.cfg": {
		"prefix": "AddPermission",
		"body": ["QBCore.Functions.AddPermission(${1:source},${2:permission})"],
		"description": "SERVER/Add Permission for a player, always create the permission on the server.cfg"
	},
	"SERVER/Inserts a new entry into the database and returns the insert id for the row, if valid.": {
		"prefix": "MySQL.insert",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/insert ", "MySQL.insert(${1:query},{${2:args}},function(cb) ", "", "end)"],
		"description": "SERVER/Inserts a new entry into the database and returns the insert id for the row, if valid."
	},
	"SERVER/Inserts a new entry into the database and returns the insert id for the row, if valid. and wait for a promise": {
		"prefix": "MySQL.insert.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/insert ", " local ${1:variable} = MySQL.insert.await(${2:query}, {${3:args}})"],
		"description": "SERVER/Inserts a new entry into the database and returns the insert id for the row, if valid. and wait for a promise"
	},
	"SERVER/Prepare can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query.": {
		"prefix": "MySQL.prepare",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/prepare ", "MySQL.prepare(${1:query}, {{${2:args}}}, function(result)", "  ", "end)"],
		"description": "SERVER/Prepare can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query."
	},
	"SERVER/Prepare can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query.This is the promise version": {
		"prefix": "MySQL.prepare.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/prepare ", "local ${1:variable} = MySQL.prepare.await(${2:query},{${3:args}})"],
		"description": "SERVER/Prepare can be used to execute frequently called queries faster and accepts multiple sets of parameters to be used with a single query."
	},
	"SERVER/Generic function that can be utilised for any query.": {
		"prefix": "MySQL.query",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/query", "MySQL.query(${1:query}, {{${2:args}}}, function(result)", "", "end)"],
		"description": "SERVER/Generic function that can be utilised for any query."
	},
	"SERVER/Generic function that can be utilised for any query. Promise": {
		"prefix": "MySQL.query.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/query", "local ${1:variable} = MySQL.query.await(${1:query}, {{${2:args}})"],
		"description": "SERVER/Generic function that can be utilised for any query. Promise"
	},
	"SERVER/Returns the first column for a single row.": {
		"prefix": "MySQL.scalar",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/scalar", "MySQL.scalar(${1:query}, {${2:args}}, function(return)", "", "end)"],
		"description": "SERVER/Returns the first column for a single row."
	},
	"SERVER/Returns the first column for a single row.Promise": {
		"prefix": "MySQL.scalar.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/scalar", "local ${1:variable} = MySQL.scalar.await(${2:query}, {${3:args}})"],
		"description": "SERVER/Returns the first column for a single row.Promise"
	},
	"SERVER/Returns the columns for a single row.": {
		"prefix": "MySQL.single",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/single", "MySQL.single(${1:query}, {${2:args}}, function(result)", "", "end)"],
		"description": "SERVER/Returns the columns for a single row."
	},
	"SERVER/Returns the columns for a single row. Promise": {
		"prefix": "MySQL.single.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/single", "local ${1:variable} = MySQL.single.await(${2:query}, {${3:args}})"],
		"description": "SERVER/Returns the columns for a single row. Promise"
	},
	"SERVER/A transaction executes multiple queries and commits them only if all succeed. If one fails, none of the queries are committed. The return value is a boolean, which is the result of the transaction.": {
		"prefix": "MySQL.transaction",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/transaction", "local ${1:queries} = {", "  {query = \"\",values = {} }", "}", "MySQL.transaction(${1:queries}, function(result)", "end)"],
		"description": "SERVER/A transaction executes multiple queries and commits them only if all succeed. If one fails, none of the queries are committed. The return value is a boolean, which is the result of the transaction."
	},
	"SERVER/A transaction executes multiple queries and commits them only if all succeed. If one fails, none of the queries are committed. The return value is a boolean, which is the result of the transaction.Promise": {
		"prefix": "MySQL.transaction.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/transaction", "local ${1:queries} = {", "  {query = \"\",values = {} }", "}", "local result = MySQL.transaction.await(${1:queries})"],
		"description": "SERVER/A transaction executes multiple queries and commits them only if all succeed. If one fails, none of the queries are committed. The return value is a boolean, which is the result of the transaction.Promise"
	},
	"SERVER/Returns the number of affected rows by the query.": {
		"prefix": "MySQL.update",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/update", "MySQL.update(${1:query}, {${2:args}}, function(affectedRows)", "", "end)"],
		"description": "SERVER/Returns the number of affected rows by the query."
	},
	"SERVER/Returns the number of affected rows by the query.Promise": {
		"prefix": "MySQL.update.await",
		"body": ["--https://overextended.github.io/docs/oxmysql/Usage/transaction", "local Promise = MySQL.update.await(${1:query}, {${2:args}})"],
		"description": "SERVER/Returns the number of affected rows by the query.Promise"
	},
	"CLIENT/SERVER Create a Thread": {
		"prefix": "CT",
		"body": ["CreateThread(function() ", "", "end)"],
		"description": "CLIENT/SERVER Create a Thread"
	},
	"CLIENT/ Register a Key event, Command: is the name of the command, Definition: is the description, Type: This can be, mouse, keyboard, and the Button: is the key to press to fire the event": {
		"prefix": ["KeyMapping", "km"],
		"body": ["--https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/", "RegisterCommand('+${1:command}', function()", "", "end, false)", "RegisterCommand('-${1:command}', function()", "", "end, false)", "RegisterKeyMapping('+${1:command}', '${2:definition}', '${3:type}', '${4:button}')"],
		"description": "CLIENT/ Register a Key event, Command: is the name of the command, Definition: is the description, Type: This can be, mouse, keyboard, and the Button: is the key to press to fire the event"
	},
	"CLIENT/ Print in the console a message": {
		"prefix": "log",
		"body": ["function log(text)", "print(json.encode(text, { pretty = true, indent = \"  \", align_keys = true }))", "end"],
		"description": "CLIENT/ Print in the console a message"
	},
	"CLIENT/ Function to create a blip, pass the coordinates and a text": {
		"prefix": "Blip",
		"body": ["function addBlip(coords, text)", "local blip = AddBlipForCoord(coords.x, coords.y, coords.z)", "SetBlipSprite(blip, 535)", "SetBlipColour(blip, 1)", "SetBlipDisplay(blip, 4)", "SetBlipAlpha(blip, 250)", "SetBlipScale(blip, 0.8)", "SetBlipAsShortRange(blip, false)", "PulseBlip(blip)", "BeginTextCommandSetBlipName(\"STRING\")", "AddTextComponentString(text)", "EndTextCommandSetBlipName(blip)", "return blip", "end"],
		"description": "CLIENT/ Function to create a blip, pass the coordinates and a text"
	},
	"CLIENT/ Register an Event": {
		"prefix": "NetEvent",
		"body": ["RegisterNetEvent(${1:name},function(args) ", "", "end)"],
		"description": "CLIENT/ Register an Event"
	},
	"SERVER/ Register an Event on the server": {
		"prefix": "ServerEvent",
		"body": ["RegisterServerEvent(${1:name},function(args) ", "", "end)"],
		"description": "SERVER/ Register an Event on the server"
	},
	"CLIENT: OnPlayerLoaded": {
		"prefix": "OnPlayerLoaded",
		"body": ["RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()", "", "end)", ""],
		"description": "OnPlayerLoaded"
	},
	"CLIENT: OnJobUpdate": {
		"prefix": "OnJobUpdate",
		"body": ["RegisterNetEvent('QBCore:Client:OnJobUpdate', function(job)", "", "end)"],
		"description": "On Job Update Event"
	},
	"SERVER/CLIENT Register a command": {
		"prefix": "Command",
		"body": ["RegisterCommand(${1:name},function(source,args) ", "", "end)"],
		"description": "SERVER/CLIENT Register a command"
	},
	"CLIENT/Open QB-Menu": {
		"prefix": "Menu",
		"body": ["local MenuData = {", "        {", "            header = \"${1:HeaderTitle}\",", "            isMenuHeader = true, ", "        },", "        {", "            header = \"Sub Menu Button\",", "            txt = \"This goes to a sub menu\",", "            params = {", "                event = ", "                args = {", "                    number = 1,", "                }", "            }", "        },", "    }", "exports.qb-menu:openMenu(MenuData)"],
		"description": "CLIENT/Open Create a new Menu"
	},
	"CLIENT/RegisterKeyMapping": {
		"prefix": "KeyMapping",
		"body": ["RegisterCommand('+${1:CommandName}', function()", "end, false)", "", "RegisterCommand('-${1:CommandName}', function()", "end, false)", "", "RegisterKeyMapping('+${1:CommandName}', '${2:Description}', '${3:type}', '${4:KeyToPress}')"],
		"description": "CLIENT/RegisterKeyMapping"
	}
}
